geom_jitter()
ggplot(oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter()
ggplot(oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter(colour=Country)
ggplot(data = oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter(colour=Country)
ggplot(data = oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter(colour= Country)
ggplot(data = oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter(data =oceania, colour= Country)
ggplot(data = oceania, aes(x = Year, y = AverageTemperature)) +
geom_jitter(data =oceania, fill= Country)
ggplot(data = oceania, aes(x = Year, y = AverageTemperature, fill= Country)) +
geom_jitter()
ggplot(data = oceania, aes(x = Year, y = AverageTemperature, colour= Country)) +
geom_jitter()
zimza <- ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country , scales = "fixed") +
scale_y_continuous(breaks = seq(0,30, by = 5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
zimza
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country ,scales = "free_x") +
scale_y_continuous(breaks = seq(0,30, by = 5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country) +
scale_y_continuous(breaks = seq(0,30, by = 2.5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country) +
scale_y_continuous(breaks = seq(0,28, by = 2.5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country) +
scale_y_continuous(breaks = seq(0,27, by = 2.5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country) +
scale_y_continuous(breaks = seq(0,27, by = 3)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
ggplot(africaplots, aes(y= AverageTemperature, x=Year, fill = Country)) +
theme_bw() +
geom_col(position = "dodge") +
facet_wrap( ~Country) +
scale_y_continuous(breaks = seq(0,30, by = 2.5)) +
scale_x_continuous(breaks = seq(2000,2013, by = 2))+
geom_hline(yintercept = 25)
# Heat map
sweData <- TemperatureData %>% filter(Country == "Sweden")
denData <- TemperatureData %>% filter(Country == "Denmark")
finData <- TemperatureData %>% filter(Country == "Finland")
norData <- TemperatureData %>%  filter(Country == "Norway")
iceData <- TemperatureData %>% filter(Country =="Iceland")
beData <- TemperatureData %>% filter(Country == "Belgium")
luxData <- TemperatureData %>% filter(Country == "Luxembourg")
nedata <- TemperatureData %>% filter(Country =="Netherlands")
ukdata <-  TemperatureData %>% filter (Country =="United Kingdom")
## Interactive  data
# Plotly
x_axis <- list(
title = "Date"
)
y_axis <- list(
title = "Average Temperature"
)
plotlyInt <- plot_ly(data = interactiveData, x = ~interactiveData$Year, y = ~interactiveData$AverageTemperature, color= ~interactiveData$Country, visible="legendonly", mode="lines",
text = paste(interactiveData$Year))  %>%
layout(xaxis = x_axis, yaxis = y_axis, title="Mainland European Countries Average Temperature")
#Dygraph Code
countryTemp$Timeline <- NULL
germanyData <- countryTemp
germanyData <- germanyData %>% filter(Country == "Germany")
austriaData <- countryTemp
austriaData <- austriaData %>% filter(Country =="Austria")
#Interactive Plotly Time Series
plotlyInt
## Interactive  data
# Plotly
x_axis <- list(
title = "Date"
)
y_axis <- list(
title = "Average Temperature"
)
plotlyInt <- plot_ly(data = interactiveData, x = ~interactiveData$Year, y = ~interactiveData$AverageTemperature, color= ~interactiveData$Country, visible="legendonly", mode="lines",
text = paste(interactiveData$Year))  %>%
layout(xaxis = x_axis, yaxis = y_axis, title="Mainland European Countries Average Temperature")
#Dygraph Code
countryTemp$Timeline <- NULL
germanyData <- countryTemp
germanyData <- germanyData %>% filter(Country == "Germany")
austriaData <- countryTemp
austriaData <- austriaData %>% filter(Country =="Austria")
germanyData <- countryTemp
germanyData <- germanyData %>% filter(Country == "Germany")
austriaData <- countryTemp
austriaData <- austriaData %>% filter(Country =="Austria")
knitr::opts_chunk$set(echo = TRUE)
# speak about the gaps of the data
# due to avg temp could be more accurate with high/low temps
#data proprocessing etc speak about ref
# Assignment 2
#Data Science Product Development
#installing packages used
#install.packages("lubridate")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("tidyverse")
#install.packages("flexdashboard")
#install.packages("maps")
#install.packages("mapproj")
#install.packages("dplyr")
#install.packages("plotly")
#install.packages("dygraphs")
#install.packages("gridExtra")
#install.packages("gifski")
#install.packages("heatmaply")
#packages used
library("lubridate")
library("flexdashboard")
library("ggplot2")
library("gganimate")
library("dplyr")
library("tidyverse")
library("gifski")
library("plotly")
library("dygraphs")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("heatmaply")
# Dataset from Kaggle
# https://www.kaggle.com/berkeleyearth/climate-change-earth-surface-temperature-data
# how global warming is affecting the planet
dygraph(germanyData,main="Average Temperature in Germany" ) %>% dyRangeSelector() %>% dyOptions(stackedGraph = FALSE)
#dygraph(austriaData, main="Average Temperature in Austria")  %>% dyRangeSelector() %>% #dyOptions(stackedGraph = FALSE)
dygraph(germanyData,main="Average Temperature in Germany" )
knitr::opts_chunk$set(echo = TRUE)
# speak about the gaps of the data
# due to avg temp could be more accurate with high/low temps
#data proprocessing etc speak about ref
# Assignment 2
#Data Science Product Development
#installing packages used
#install.packages("lubridate")
#install.packages("ggplot2")
#install.packages("gganimate")
#install.packages("tidyverse")
#install.packages("flexdashboard")
#install.packages("maps")
#install.packages("mapproj")
#install.packages("dplyr")
#install.packages("plotly")
#install.packages("dygraphs")
#install.packages("gridExtra")
#install.packages("gifski")
#install.packages("heatmaply")
#packages used
library("lubridate")
library("flexdashboard")
library("ggplot2")
library("gganimate")
library("dplyr")
library("tidyverse")
library("gifski")
library("plotly")
library("dygraphs")
library("RColorBrewer")
library("grid")
library("gridExtra")
library("heatmaply")
# Dataset from Kaggle
# https://www.kaggle.com/berkeleyearth/climate-change-earth-surface-temperature-data
# how global warming is affecting the planet
TemperatureData <- read.csv("dataset/GlobalLandTemperaturesByCountry.csv", header = TRUE, sep="," )
#Data
#Fixing Countries for the map so no duplicate country names
TemperatureData <- na.omit(TemperatureData) # gets rid of all NA values
TemperatureData$AverageTemperatureUncertainty <- NULL # drops the uncertainty  column
TemperatureData$Country[TemperatureData$Country =="United Kingdom (Europe)"] <- "United Kingdom" # Sets UK to all the same value
#head(TemperatureData)
TemperatureData$Country[TemperatureData$Country =="Ã…land"] <- "Finland"
TemperatureData$Country[TemperatureData$Country == "Denmark (Europe)"] <- "Denmark"
TemperatureData$Country[TemperatureData$Country =="France (Europe)"] <- "France"
TemperatureData$Country[TemperatureData$Country == "Netherlands (Europe)"] <- "Netherlands"
colnames(TemperatureData)[1] <- "Year" # chaning dt to Year
TemperatureData$Timeline <- substr(TemperatureData$Year, 1,4)
TemperatureData <- TemperatureData %>% filter(as.integer(Timeline) > 1959)
nonEULinePlots <- TemperatureData
#Selecting countries
TemperatureData<- TemperatureData %>% filter(Country == "Austria" | Country == "Belgium"|
Country == "Bulgaria" | Country == "Croatia"|
Country == "Cyprus" | Country == "Czech Republic"|
Country == "Denmark" | Country == "Estonia"|
Country == "Finland" | Country == "France"|
Country == "Germany" | Country == "Greece"|
Country == "Hungary" | Country == "Iceland"|
Country == "Italy" | Country == "Latvia"|
Country == "Lithuania" | Country == "Luxembourg"|
Country == "Malta" | Country == "Netherlands"|
Country == "Poland" | Country == "Portugal"|
Country == "Romania" | Country == "Slovakia"|
Country == "Slovenia" | Country == "Spain"|
Country == "Sweden" | Country == "Netherlands"|
Country == "Norway" | Country == "Serbia"|
Country == "United Kingdom" )
#Need Iceland data possible without year split off
iceFutData <- TemperatureData
#Interactive Data uses the Year/Month/Day in one column
interactiveData <- TemperatureData
animatedData <- TemperatureData
#Splitting the Month/Day into their own columns
TemperatureData$Day <- substr(TemperatureData$Year, 9,10) # grabbing day from the datetime
TemperatureData$Month <- substr(TemperatureData$Year,6,7) # grabbing month from the datetime
TemperatureData$Year <- year(TemperatureData$Year ) # only grabbing the year of the temperature, not months
#filter only over 1960 has onlyh wish to see the last 60 years
TemperatureData$AverageTemperature <- round(TemperatureData$AverageTemperature, digits = 2) # setting the digits to only 2
#typeof(TemperatureData$Country)
countryTemp <- TemperatureData
#Animated Bar
ani6070 <- animatedData
ani6070 <- ani6070 %>% filter(as.integer(Timeline) > 1959 & as.integer(Timeline) < 1966  )
#aniyear <- year(countryTemp$dt)
aniyear <- as.integer(ani6070$Year)
#ggani <- ggplot(ani6070,
#             aes(x=Country, y= AverageTemperature, colour = ani6070$Country, label = AverageTemperature),title(main="Average Temperatures from 1960 to 1970 within Europe" ))+
#geom_point()+
# labs(x = "Country", y="Average Temperature")   +coord_flip()  + geom_text(nudge_y = 0 )
#ggani <- ggani + transition_time(aniyear)  +
# ease_aes('cubic-in-out') +  labs(title="Year: {frame_time}", fill = "Countries")
gg60<-  ggplot(ani6070, aes(x=Year, y=AverageTemperature, colour= ani6070$Country), main="Average Temperature between 1959- 1966") + geom_point()+
labs(x = "Year", y="Average Temperature") + theme(axis.text.x = element_text(angle=90, hjust=2, size = 12))
gg60 <- gg60 + transition_time(aniyear) + ease_aes("cubic-in-out") +
labs(colour="Countries")
## 70-80
ani7080 <- animatedData
ani7080 <- ani7080 %>% filter(as.integer(Timeline) < 1973 & as.integer(Timeline) > 1966)
ani7080year <- as.integer(ani7080$Year)
#ggani7080 <- ggplot(ani7080,
#               aes(x=Country, y= AverageTemperature, fill = ani7080$Country, label = AverageTemperature),title(main="Average Temperatures from 1970 to 1980 within Europe" ))+
#geom_line()+
#labs(x = "Country", y="Average Temperature")   +coord_flip()  + geom_text(nudge_y = 0 )
#ggani7080 <- ggani7080 + transition_time(ani7080year)  +
# ease_aes('cubic-in-out') +  labs(title="Year: {frame_time}", fill = "Countries")
gg70<-  ggplot(ani7080, aes(x=Year, y=AverageTemperature, colour= ani7080$Country), main="Average Temperature between 1966- 1973") + geom_point()+
labs(x = "Year", y="Average Temperature") + theme(axis.text.x = element_text(angle=90, hjust=2, size = 10))
gg70 <- gg70 + transition_time(ani7080year) + ease_aes("cubic-in-out") +
labs(colour="Countries")
###  80 - 90
ani9999 <- animatedData
ani9999 <- ani9999 %>% filter(as.integer(Timeline) <1999 & as.integer(Timeline) > 1990)
ani9999year <- as.integer(ani9999$Year)
#ggani9999 <- ggplot(ani9999,
#              aes(x=Country, y= AverageTemperature, fill = ani9999$Country, label = AverageTemperature),title(main="Average Temperatures from 1980 to 1990 within Europe" ))+
# geom_line()+
#  labs(x = "Country", y="Average Temperature")   +coord_flip()  + geom_text(nudge_y = 0 )
#ggani9999 <- ggani9999 + transition_time(ani9999year)  +
# ease_aes('cubic-in-out') +  labs(title="Year: {frame_time}", fill = "Countries")
gg9999<-  ggplot(ani9999, aes(x=Year, y=AverageTemperature, colour= ani9999$Country), main="Average Temperature between 1990- 1999") + geom_point() +
labs(x = "Year", y="Average Temperature") + theme(axis.text.x = element_text(angle=90, hjust=2, size = 10))
gg9999 <- gg9999 + transition_time(ani9999year) + ease_aes("cubic-in-out")
###  99 - 006
ani9000 <- animatedData
ani9000 <- ani9000 %>% filter(as.integer(Timeline) < 2006 & as.integer(Timeline) > 1999)
ani9000year <- as.integer(ani9000$Year)
#ggani90 <- ggplot(ani9000,
#               aes(x=Country, y= AverageTemperature, fill = ani9000$Country, label = AverageTemperature),title(main="Average Temperatures from 1990 to 2000s within Europe" ))+
#geom_line()+
#labs(x = "Country", y="Average Temperature")   +coord_flip()  + geom_text(nudge_y = 0 )
#ggani9000 <- ggani90 + transition_time(ani9000year)  +
# ease_aes('cubic-in-out') +  labs(title="Year: {frame_time}", fill = "Countries")
gg9906<-  ggplot(ani9000, aes(x=Year, y=AverageTemperature, colour= ani9000$Country), main="Average Temperature between 1999- 2006") + geom_point()+
labs(x = "Year", y="Average Temperature") + theme(axis.text.x = element_text(angle=90, hjust=2, size = 12))
gg9906 <- gg9906 + transition_time(ani9000year) + ease_aes("cubic-in-out") +
labs(colour="Countries")
## 06--2013
ani00now <- animatedData
ani00now <- ani00now %>% filter(as.integer(Timeline) > 2006)
#aniyear <- year(countryTemp$dt)
aniyearnow <- as.integer(ani00now$Year)
#gganinow <- ggplot(ani00now,
#               aes(x=Country, y= AverageTemperature, fill = ani00now$Country, label = AverageTemperature),title(main="Average Temperatures from 1990 to 2013 within Europe" ))+
#geom_line()+
#labs(x = "Country", y="Average Temperature")   +coord_flip()  + geom_text(nudge_y = 0 )
#gganinow <- gganinow + transition_time(aniyearnow)  +
# ease_aes('cubic-in-out') +  labs(title="Year: {frame_time}", fill = "Countries")
gg2k<-  ggplot(ani00now, aes(x=Year, y=AverageTemperature, colour= ani00now$Country), main="Average Temperature between 2006- 2013") + geom_point()+
labs(x = "Year", y="Average Temperature") + theme(axis.text.x = element_text(angle=90, hjust=2, size = 12))
gg2k <- gg2k + transition_time(aniyearnow) + ease_aes("cubic-in-out") +
labs(colour="Countries")
## Interactive  data
# Plotly
x_axis <- list(
title = "Date"
)
y_axis <- list(
title = "Average Temperature"
)
plotlyInt <- plot_ly(data = interactiveData, x = ~interactiveData$Year, y = ~interactiveData$AverageTemperature, color= ~interactiveData$Country, visible="legendonly", mode="lines",
text = paste(interactiveData$Year))  %>%
layout(xaxis = x_axis, yaxis = y_axis, title="Mainland European Countries Average Temperature")
#Dygraph Code
countryTemp$Timeline <- NULL
germanyData <- countryTemp
germanyData <- germanyData %>% filter(Country == "Germany")
austriaData <- countryTemp
austriaData <- austriaData %>% filter(Country =="Austria")
#Nordic
sweplot <- ggplot(sweData, aes(Year, Month)) +
geom_tile (aes(fill=AverageTemperature)) +   labs(title="Sweden Heat Map Temperatures") +
scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
# Heat map
sweData <- TemperatureData %>% filter(Country == "Sweden")
denData <- TemperatureData %>% filter(Country == "Denmark")
finData <- TemperatureData %>% filter(Country == "Finland")
norData <- TemperatureData %>%  filter(Country == "Norway")
iceData <- TemperatureData %>% filter(Country =="Iceland")
beData <- TemperatureData %>% filter(Country == "Belgium")
luxData <- TemperatureData %>% filter(Country == "Luxembourg")
nedata <- TemperatureData %>% filter(Country =="Netherlands")
ukdata <-  TemperatureData %>% filter (Country =="United Kingdom")
#Nordic
sweplot <- ggplot(sweData, aes(Year, Month)) +
geom_tile (aes(fill=AverageTemperature)) +   labs(title="Sweden Heat Map Temperatures") +
scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
denplot <- ggplot(denData, aes(Year, Month)) +
geom_tile (aes(fill=AverageTemperature)) + labs(title="Denmark Heat Map Temperatures") +
scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
finplot <- ggplot(finData, aes(Year, Month)) +   labs(title="Finland Heat Map Temperatures") +
geom_tile (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
iceplot <- ggplot(iceData, aes(Year, Month)) +   labs(title="Iceland Heat Map Temperatures") +
geom_tile (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
norplot <- ggplot(norData, aes(Year, Month)) +   labs(title="Norway Heat Map Temperatures") +
geom_tile (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red") + theme(axis.text.y = element_text(size = 6))
#Be / lux EU
beplot <- ggplot(beData, aes(Year, Month)) +   labs(title="Belgium Heat Map Temperatures") +
geom_raster (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red")+ theme(axis.text.y = element_text(size = 6))
luxplot <- ggplot(luxData, aes(Year, Month)) +   labs(title="Luxembourg Heat Map Temperatures") +
geom_raster (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red")+ theme(axis.text.y = element_text(size = 6))
neplot <- ggplot(nedata, aes(Year, Month)) +   labs(title="Netherlands Heat Map Temperatures") +
geom_raster (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red")+ theme(axis.text.y = element_text(size = 6))
ukplot <- ggplot(ukdata, aes(Year, Month)) +   labs(title="United Kingdom Heat Map Temperatures") +
geom_raster (aes(fill=AverageTemperature)) + scale_fill_gradient2(low = "blue", mid = "green", high = "red")+ theme(axis.text.y = element_text(size = 6))
ukplotly  <- plot_ly(data = ukdata, x=ukdata$Year, y=ukdata$Month, z=ukdata$AverageTemperature, type = "heatmap") %>% layout(title = "UK Heatmap Data", xaxis = list(title = "Years"), yaxis = list(title="Months"))
ukplotly
library("dplyr")
knit_with_parameters('E:/CETM46 - Data Science Product Development/Assignments/Assginment 2/assignment 2.Rmd')
unlink('E:/CETM46 - Data Science Product Development/Assignments/Assginment 2/assignment 2_cache', recursive = TRUE)
task1 <- c("Collect Data","Data Preprocessing", "2019-03-29", "2019-03-30")
task2 <- c("Clean Data", "Data Preprocessing", "2019-04-10", "2019-04-07")
task3 <- c("Analyse Data", "Data Preprocessing","2019-04-02", "2019-05-05" )
task4 <- c("Filter Data", "Data Preprocessing", "2019-04-10", "2019-05-13")
task5 <- c("Markdown Structure", "Planinng & Setup",  "2019-04-02", "2019-04-10")
task6 <- c("Video Animation","Video", "2019-04-11", "2019-05-16")
task7 <- c("Plotly Interactivity","Interactivity", "2019-04-23", "2019-04-25")
task8 <- c("Dygraph Interactivity","Interactivity", "2019-04-23", "2019-04-29")
task9 <- c("Heatmap Plots","Plotting", "2019-04-26", "2019-05-01")
task0 <- c("Plan the project","Planinng & Setup",  "2019-03-29", "2019-04-03")
task11 <- c("Heatmap Interactivity", "Interactivity", "2019-05-15", "2019-05-17")
task12 <- c("African Bar Plots", "Plotting", "2019-05-21", "2019-05-22" )
df <- as.data.frame(rbind(task0, task1, task2, task3,task5,
task4, task6 , task7, task8, task9, task11))
names(df) <- c("task","group", "start", "end")
df$task <- factor(df$task, levels = df$task)
df$start <- as.Date(df$start)
df$end <- as.Date(df$end)
df_melt_data <- melt(df, measure.vars = c("start", "end"))
start_date <- as.Date("2019-03-29")
ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "6 day")
task1 <- c("Collect Data","Data Preprocessing", "2019-03-29", "2019-03-30")
task2 <- c("Clean Data", "Data Preprocessing", "2019-04-10", "2019-04-07")
task3 <- c("Analyse Data", "Data Preprocessing","2019-04-02", "2019-05-05" )
task4 <- c("Filter Data", "Data Preprocessing", "2019-04-10", "2019-05-13")
task5 <- c("Markdown Structure", "Planinng & Setup",  "2019-04-02", "2019-04-10")
task6 <- c("Video Animation","Video", "2019-04-11", "2019-05-16")
task7 <- c("Plotly Interactivity","Interactivity", "2019-04-23", "2019-04-25")
task8 <- c("Dygraph Interactivity","Interactivity", "2019-04-23", "2019-04-29")
task9 <- c("Heatmap Plots","Plotting", "2019-04-26", "2019-05-01")
task0 <- c("Plan the project","Planinng & Setup",  "2019-03-29", "2019-04-03")
task11 <- c("Heatmap Interactivity", "Interactivity", "2019-05-15", "2019-05-17")
task12 <- c("African Bar Plots", "Plotting", "2019-05-21", "2019-05-22" )
df <- as.data.frame(rbind(task0, task1, task2, task3,task5,
task4, task6 , task7, task8, task9, task11))
names(df) <- c("task","group", "start", "end")
df$task <- factor(df$task, levels = df$task)
df$start <- as.Date(df$start)
df$end <- as.Date(df$end)
df_melt_data <- melt(df, measure.vars = c("start", "end"))
start_date <- as.Date("2019-03-29")
ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "6 day")
library(reshape2)
df_melt_data <- melt(df, measure.vars = c("start", "end"))
start_date <- as.Date("2019-03-29")
ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "6 day")
task1 <- c("Collect Data","Data Preprocessing", "2019-03-29", "2019-03-30")
task2 <- c("Clean Data", "Data Preprocessing", "2019-04-10", "2019-04-07")
task3 <- c("Analyse Data", "Data Preprocessing","2019-04-02", "2019-05-05" )
task4 <- c("Filter Data", "Data Preprocessing", "2019-04-10", "2019-05-13")
task5 <- c("Markdown Structure", "Planinng & Setup",  "2019-04-02", "2019-04-10")
task6 <- c("Video Animation","Video", "2019-04-11", "2019-05-16")
task7 <- c("Plotly Interactivity","Interactivity", "2019-04-23", "2019-04-25")
task8 <- c("Dygraph Interactivity","Interactivity", "2019-04-23", "2019-04-29")
task9 <- c("Heatmap Plots","Plotting", "2019-04-26", "2019-05-01")
task0 <- c("Plan the project","Planinng & Setup",  "2019-03-29", "2019-04-03")
task11 <- c("Heatmap Interactivity", "Interactivity", "2019-05-15", "2019-05-17")
task12 <- c("African Bar Plots", "Plotting", "2019-05-21", "2019-05-22" )
df <- as.data.frame(rbind(task0, task1, task2, task3,task5,
task4, task6 , task7, task8, task9, task11))
df <- as.data.frame(rbind(task0, task1, task2, task3,task5,
task4, task6 , task7, task8, task9, task11, task12))
names(df) <- c("task","group", "start", "end")
df$task <- factor(df$task, levels = df$task)
df$start <- as.Date(df$start)
df$end <- as.Date(df$end)
df_melt_data <- melt(df, measure.vars = c("start", "end"))
start_date <- as.Date("2019-03-29")
ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "6 day")
ganttchart<- ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "6 day")
ggsave("figures/gantt chart.png",plot = ganttchart)
setwd("E:\CETM46 - Data Science Product Development\Assignments\Assginment 2")
setwd("E:\CETM46 - Data Science Product Development\Assignments\Assginment 2\")
setwd("E:\CETM46 - Data Science Product Development\Assignments\Assginment 2")
setwd("E:/CETM46 - Data Science Product Development/Assignments/Assginment 2")
setwd("/Assignments/Assginment 2")
setwd("E:/CETM46 - Data Science Product Development/Assignments/Assginment 2")
ggsave("figures/gantt chart.png",plot = ganttchart)
ganttchart<- ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "5 day")
ggplot(df_melt_data, aes(value, task, colour= group)) +
geom_line(size=12) +
labs(x = "Timeline", y="", title = "Gantt Chart", colour="Group") +
theme_light(base_size = 12) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major.x = element_line(colour="black", linetype = "dashed"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 0, size=10)) +
scale_x_date(date_labels = "%b %d", date_breaks = "5 day")
ggsave("figures/gantt chart.png",plot = ganttchart)
